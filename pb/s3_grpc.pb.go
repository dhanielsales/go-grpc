// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// S3ServiceClient is the client API for S3Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type S3ServiceClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (S3Service_UploadFileClient, error)
}

type s3ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewS3ServiceClient(cc grpc.ClientConnInterface) S3ServiceClient {
	return &s3ServiceClient{cc}
}

func (c *s3ServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (S3Service_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &S3Service_ServiceDesc.Streams[0], "/pb.S3Service/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &s3ServiceUploadFileClient{stream}
	return x, nil
}

type S3Service_UploadFileClient interface {
	Send(*UploadFileRequest) error
	CloseAndRecv() (*UploadFileResponse, error)
	grpc.ClientStream
}

type s3ServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *s3ServiceUploadFileClient) Send(m *UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *s3ServiceUploadFileClient) CloseAndRecv() (*UploadFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// S3ServiceServer is the server API for S3Service service.
// All implementations must embed UnimplementedS3ServiceServer
// for forward compatibility
type S3ServiceServer interface {
	UploadFile(S3Service_UploadFileServer) error
	mustEmbedUnimplementedS3ServiceServer()
}

// UnimplementedS3ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedS3ServiceServer struct {
}

func (UnimplementedS3ServiceServer) UploadFile(S3Service_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedS3ServiceServer) mustEmbedUnimplementedS3ServiceServer() {}

// UnsafeS3ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to S3ServiceServer will
// result in compilation errors.
type UnsafeS3ServiceServer interface {
	mustEmbedUnimplementedS3ServiceServer()
}

func RegisterS3ServiceServer(s grpc.ServiceRegistrar, srv S3ServiceServer) {
	s.RegisterService(&S3Service_ServiceDesc, srv)
}

func _S3Service_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(S3ServiceServer).UploadFile(&s3ServiceUploadFileServer{stream})
}

type S3Service_UploadFileServer interface {
	SendAndClose(*UploadFileResponse) error
	Recv() (*UploadFileRequest, error)
	grpc.ServerStream
}

type s3ServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *s3ServiceUploadFileServer) SendAndClose(m *UploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *s3ServiceUploadFileServer) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// S3Service_ServiceDesc is the grpc.ServiceDesc for S3Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var S3Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.S3Service",
	HandlerType: (*S3ServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _S3Service_UploadFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pb/s3.proto",
}
